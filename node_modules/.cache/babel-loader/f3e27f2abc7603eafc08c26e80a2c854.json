{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { makeStyles } from \"@material-ui/core\";\nimport { amber, blue, blueGrey, cyan, deepOrange, lightGreen, lime, orange, teal } from \"@material-ui/core/colors\";\nconst useStyles = makeStyles(theme => ({\n  lightGreen: {\n    color: theme.palette.getContrastText(lightGreen[500]),\n    backgroundColor: lightGreen[500]\n  },\n  amber: {\n    color: theme.palette.getContrastText(amber[500]),\n    backgroundColor: amber[500]\n  },\n  blue: {\n    color: theme.palette.getContrastText(blue[500]),\n    backgroundColor: blue[500]\n  },\n  cyan: {\n    color: theme.palette.getContrastText(cyan[500]),\n    backgroundColor: cyan[500]\n  },\n  blueGrey: {\n    color: theme.palette.getContrastText(blueGrey[500]),\n    backgroundColor: blueGrey[500]\n  },\n  lime: {\n    color: theme.palette.getContrastText(lime[500]),\n    backgroundColor: lime[500]\n  },\n  teal: {\n    color: theme.palette.getContrastText(teal[500]),\n    backgroundColor: teal[500]\n  },\n  orange: {\n    color: theme.palette.getContrastText(orange[500]),\n    backgroundColor: orange[500]\n  },\n  deepOrange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500]\n  }\n}));\nexport default function GetAvatarColor(type, inputString) {\n  _s();\n\n  const colorClasses = [useStyles().lightGreen, useStyles().blue, useStyles().lime, useStyles().amber, useStyles().teal, useStyles().blueGrey, useStyles().cyan, useStyles().orange, useStyles().deepOrange];\n\n  if (type === 'random') {\n    return colorClasses[Math.floor(Math.random() * 8 + 1)];\n  } else if (type === 'ascii') {\n    return colorClasses[inputString.charCodeAt(0) % colorClasses.length];\n  }\n}\n\n_s(GetAvatarColor, \"IAUD5BAOChk6il1935EGxj7oC7M=\", false, function () {\n  return [useStyles, useStyles, useStyles, useStyles, useStyles, useStyles, useStyles, useStyles, useStyles];\n});\n\n_c = GetAvatarColor;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAvatarColor\");","map":{"version":3,"sources":["E:/higher-studies-portal/src/styleComponents/GetRandomAvatarColor.js"],"names":["makeStyles","amber","blue","blueGrey","cyan","deepOrange","lightGreen","lime","orange","teal","useStyles","theme","color","palette","getContrastText","backgroundColor","GetAvatarColor","type","inputString","colorClasses","Math","floor","random","charCodeAt","length"],"mappings":"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","sourcesContent":["import {makeStyles} from \"@material-ui/core\";\r\nimport {amber, blue, blueGrey, cyan, deepOrange, lightGreen, lime, orange, teal} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles=makeStyles((theme)=>({\r\n    lightGreen:{\r\n        color:theme.palette.getContrastText(lightGreen[500]),\r\n        backgroundColor:lightGreen[500]\r\n    },\r\n    amber:{\r\n        color:theme.palette.getContrastText(amber[500]),\r\n        backgroundColor:amber[500]\r\n    },\r\n    blue:{\r\n        color:theme.palette.getContrastText(blue[500]),\r\n        backgroundColor:blue[500]\r\n    },\r\n    cyan:{\r\n        color:theme.palette.getContrastText(cyan[500]),\r\n        backgroundColor:cyan[500]\r\n    },\r\n    blueGrey:{\r\n        color:theme.palette.getContrastText(blueGrey[500]),\r\n        backgroundColor:blueGrey[500]\r\n    },\r\n    lime:{\r\n        color:theme.palette.getContrastText(lime[500]),\r\n        backgroundColor:lime[500]\r\n    },\r\n    teal:{\r\n        color:theme.palette.getContrastText(teal[500]),\r\n        backgroundColor:teal[500]\r\n    },\r\n    orange:{\r\n        color:theme.palette.getContrastText(orange[500]),\r\n        backgroundColor:orange[500]\r\n    },\r\n    deepOrange:{\r\n        color:theme.palette.getContrastText(deepOrange[500]),\r\n        backgroundColor:deepOrange[500]\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function GetAvatarColor(type,inputString){\r\n    const colorClasses=[useStyles().lightGreen,useStyles().blue,useStyles().lime,useStyles().amber,useStyles().teal,useStyles().blueGrey,useStyles().cyan,useStyles().orange,useStyles().deepOrange];\r\n    if (type==='random'){\r\n        return colorClasses[Math.floor((Math.random()*8)+1)];\r\n    }else if(type==='ascii'){\r\n        return colorClasses[inputString.charCodeAt(0)%(colorClasses.length)];\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}